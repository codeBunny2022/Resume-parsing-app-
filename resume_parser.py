# -*- coding: utf-8 -*-
"""Resume-Parser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xN2PXf9jSJFST2-qfeGZVx6Dly07DWJT
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/UpdatedResumeDataSet.csv')

print(df.head())

df.shape

counts=df['Category'].value_counts()
labels=df['Category'].unique()
plt.figure(figsize=(15,10))
plt.pie(counts,labels=labels,autopct='%1.1f%%',shadow=True,colors=plt.cm.plasma(np.linspace(0,1,3)))
plt.show()

import re
def cleanResume(txt):
  cleanText=re.sub('http\S+\s',' ',txt)
  cleanText=re.sub('RT|cc',' ',cleanText)
  cleanText=re.sub('#\S+\s',' ',cleanText)
  cleanText=re.sub('@\S+',' ',cleanText)
  cleanText=re.sub('[%s]' % re.escape("""!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~"""),' ',cleanText)
  cleanText=re.sub(r'[^\x00-\x7f]',' ',cleanText)
  cleanText=re.sub('\s+',' ',cleanText)
  return cleanText

df['Resume']=df['Resume'].apply(lambda x:cleanResume(x))

df['Resume'][0]

df['Category'].unique()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

le.fit(df['Category'])
df['Category']=le.transform(df['Category'])

df.Category.unique()

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf=TfidfVectorizer(stop_words='english')

tfidf.fit(df['Resume'])
requiredText =tfidf.transform(df['Resume'])

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(requiredText,df['Category'],test_size=0.2,random_state=42)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import accuracy_score

clf=OneVsRestClassifier(KNeighborsClassifier())
clf.fit(x_train,y_train)
ypred=clf.predict(x_test)
print(ypred)

print(accuracy_score(y_test,ypred))

import pickle
pickle.dump(tfidf,open('tfidf.pkl','wb'))
pickle.dump(clf,open('clf.pkl','wb'))

myresume=""" Rakesh Kumar
123 NLP Lane, AI City, ML State, Zip: 12345 | rakesh@email.com | (123) 456-7890
Summary:
Detail-oriented NLP Engineer with a passion for creating innovative natural language processing solutions. Experienced in developing and implementing NLP algorithms for text classification, sentiment analysis, and named entity recognition. Skilled in Python, TensorFlow, and NLTK.
Education:
Master of Science in Computer Science
AI University, ML State
Graduated: May 20XX
Bachelor of Technology in Computer Science
Tech College, ML State
Graduated: May 20XX
Experience:
NLP Engineer
AI Innovations, AI City
June 20XX - Present
    Developed NLP models for text summarization and entity extraction using TensorFlow and spaCy.
    Improved sentiment analysis accuracy by 15% through model optimization techniques.
    Collaborated with cross-functional teams to integrate NLP solutions into production systems.
Research Intern - NLP
Tech Research Institute, ML State
September 20XX - May 20XX
    Conducted research on semantic similarity in text using word embeddings and deep learning architectures.
    Implemented and fine-tuned recurrent neural networks for language modeling tasks.
Skills:
    Programming Languages: Python, Java, SQL
    NLP Libraries/Frameworks: NLTK, spaCy, Gensim, Transformers
    Machine Learning: TensorFlow, scikit-learn
    Natural Language Understanding, Text Classification, Sentiment Analysis
Projects:
Chatbot Development
    Created a chatbot using sequence-to-sequence models for customer support inquiries, reducing response time by 30%.
Document Summarization Tool
    Designed and implemented an extractive text summarization tool using sentence embeddings."""

#Prediction system
import pickle
clf=pickle.load(open('/content/clf.pkl','rb'))
cleaned_resume=cleanResume(myresume)
input_features=tfidf.transform([cleaned_resume])
prediction_id=clf.predict(input_features)[0]

category_mapping={6: 'Data Science',
                  12: 'HR',
                  0: 'Advocate',
                  1: 'Arts',
                  24: 'Web Designing',
                  16: 'Mechanical Engineer',
                  22: 'Sales',
                  14: 'Health and fitness',
                  5: 'Civil Engineer',
                  15: 'Java Developer',
                  4: 'Business Analyst',
                  21: 'SAP Developer',
                  2: 'Automation Testing',
                  11: 'Electrical Engineering',
                  18: 'Operations Manager',
                  20: 'Python Developer',
                  8: 'DevOps Engineer',
                  17: 'Network Security Engineer',
                  19: 'PMO',
                  7: 'Database',
                  13: 'Hadoop',
                  10: 'ETL Developer',
                  9: 'DotNet Developer',
                  3: 'Blockchain',
                  23: 'Testing'
                  }
category_name=category_mapping.get(prediction_id,"unknown")
print("Prediction category:",category_name)